{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in INR\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    // using a library\n    using PriceConverter for uint256; // use uint256 as objects\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 50 USD\n    // Constant saves gas | They are stored directly in bytecode | No storage Slots given\n    // Same with the immutable\n    uint256 public price;\n    AggregatorV3Interface public priceFeed;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    //  now requiring 776,834 gas\n    // tricks to get the gas down\n    // by adding constant and mutable keyword to variables\n    // now rquire 757,550 and then 733989 gas after use of coonstant and immutable respectively\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // set minimum fund amt\n        // if not met with condition,\n        // prior work is reverted (gas returns)\n\n        // // Require\n        // 1e18 = 1 * 10 ** 18 = 1000000000000000000 wei = 1 eth\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Send minimum 1 Eth\"\n        );\n\n        // // Revert Error handling are more gas efficient\n        // if(msg.value.getConversionRate() >= MINIMUM_USD){\n        //     revert <Error Name>\n        // }\n\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // require(msg.sender == owner); // only owner can withdraw now\n        //  for loop to reset funders fund amount\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset arrray\n        funders = new address[](0);\n\n        // // Different Withdraw Methods\n\n        // // Transfer(2300 gas | throws error)\n        // // payable address ->\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // // Send(2300 gas | return a bool for success or not)\n        // bool sendSucess = payable(msg.sender).send(address(this).balance);\n        // require(sendSucess, \"Send failed\");\n\n        // Call(special function:- treated as a transasction, low level funtion)\n        // (forward all gas pr set gas | retrun bool and some data)\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner);\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    //  What if someone send someone sends ETH wihtout fund function\n\n    // for all transaction sent externally it will trigger\n    // a. receive() if no msg.data is sent\n    // b. fallback() if msg.data is sent\n\n    // receive()\n    receive() external payable {\n        fund();\n    }\n\n    // fallback()\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// This is a Library\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        //  ETH in USD\n        // 3000.00000000\n        return uint256(answer * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        // Divided by 1e18 because both  number had 16 decimals\n        // multiplication of those gives 32 decimals, but we want 18 decimals\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}